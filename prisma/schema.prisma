generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  location    String
  description String
  imageUrl    String
  plots       Plot[]
  createdAt   DateTime @default(now())
}

model Plot {
  id            String         @id @default(cuid())
  title         String
  dimension     String
  price         Int
  priceLabel    String
  status        PlotStatus     @default(AVAILABLE)
  imageUrls     String[]
  location      String
  latitude      Float
  longitude     Float
  facing        String
  amenities     String[]
  mapEmbedUrl   String?        @db.Text
  description   String         @db.Text
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  owner         User?          @relation("PlotOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId       String?
  visitRequests VisitRequest[]
  camera        Camera?
  clientPlot    ClientPlot?
  SellRequest   SellRequest[]
  createdAt     DateTime       @default(now())
}

model User {
  id               String         @id @default(cuid())
  clerkId          String         @unique // ✅ Clerk integration ID
  name             String
  email            String         @unique
  phone            String?
  role             UserRole       @default(GUEST)
  visitRequests    VisitRequest[]
  feedback         Feedback[]
  ownedPlots       Plot[]         @relation("PlotOwner")
  clientPlots      ClientPlot[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  SellRequest      SellRequest[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ClientPlot {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String   @unique
  createdAt DateTime @default(now())
}

model Camera {
  id        String   @id @default(cuid())
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String   @unique
  ipAddress String
  label     String?
  createdAt DateTime @default(now())
}

model VisitRequest {
  id        String      @id @default(cuid())
  name      String
  email     String
  phone     String
  date      DateTime
  time      String
  status    VisitStatus @default(PENDING)
  qrCode    String?
  expiresAt DateTime?
  plot      Plot        @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  feedback  Feedback[]  // ✅ FIXED: Changed from Feedback? to Feedback[] (one-to-many)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Feedback {
  id               String       @id @default(cuid())
  visitRequestId   String       // ✅ FIXED: Renamed from bookingId to be more explicit
  rating           Int          @db.SmallInt // ✅ Added constraint for 1-5 rating
  experience       String       @db.Text
  suggestions      String       @db.Text
  purchaseInterest Boolean?
  visitRequest     VisitRequest @relation(fields: [visitRequestId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  createdAt        DateTime     @default(now())

  // ✅ FIXED: Added compound unique constraint to prevent duplicate feedback per visit
  @@unique([visitRequestId, userId])
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model SellRequest {
  id        String   @id @default(cuid())
  plot      Plot     @relation(fields: [plotId], references: [id], onDelete: Cascade)
  plotId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reason    String   @db.Text
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

enum UserRole {
  GUEST
  CLIENT
  MANAGER
}

enum PlotStatus {
  AVAILABLE
  ADVANCE
  SOLD
}

enum VisitStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}